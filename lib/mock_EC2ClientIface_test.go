package autoscaler

import ec2 "github.com/aws/aws-sdk-go/service/ec2"
import mock "github.com/stretchr/testify/mock"

// MockEC2ClientIface is an autogenerated mock type for the EC2ClientIface type
type MockEC2ClientIface struct {
	mock.Mock
}

// CancelOpenSIRs provides a mock function with given fields: reqs
func (_m *MockEC2ClientIface) CancelOpenSIRs(reqs []*ec2.SpotInstanceRequest) error {
	ret := _m.Called(reqs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*ec2.SpotInstanceRequest) error); ok {
		r0 = rf(reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeInstances provides a mock function with given fields: change, ami, terminationTarget
func (_m *MockEC2ClientIface) ChangeInstances(change map[InstanceVariety]int64, ami string, terminationTarget Instances) error {
	ret := _m.Called(change, ami, terminationTarget)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[InstanceVariety]int64, string, Instances) error); ok {
		r0 = rf(change, ami, terminationTarget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStatusTagsOfSIRs provides a mock function with given fields: reqs, status
func (_m *MockEC2ClientIface) CreateStatusTagsOfSIRs(reqs []*ec2.SpotInstanceRequest, status string) error {
	ret := _m.Called(reqs, status)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*ec2.SpotInstanceRequest, string) error); ok {
		r0 = rf(reqs, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeadSIRs provides a mock function with given fields:
func (_m *MockEC2ClientIface) DescribeDeadSIRs() ([]*ec2.SpotInstanceRequest, error) {
	ret := _m.Called()

	var r0 []*ec2.SpotInstanceRequest
	if rf, ok := ret.Get(0).(func() []*ec2.SpotInstanceRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.SpotInstanceRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingAndActiveSIRs provides a mock function with given fields:
func (_m *MockEC2ClientIface) DescribePendingAndActiveSIRs() ([]*ec2.SpotInstanceRequest, error) {
	ret := _m.Called()

	var r0 []*ec2.SpotInstanceRequest
	if rf, ok := ret.Get(0).(func() []*ec2.SpotInstanceRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.SpotInstanceRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotPrices provides a mock function with given fields: vs
func (_m *MockEC2ClientIface) DescribeSpotPrices(vs []InstanceVariety) (map[InstanceVariety]float64, error) {
	ret := _m.Called(vs)

	var r0 map[InstanceVariety]float64
	if rf, ok := ret.Get(0).(func([]InstanceVariety) map[InstanceVariety]float64); ok {
		r0 = rf(vs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[InstanceVariety]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]InstanceVariety) error); ok {
		r1 = rf(vs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkingInstances provides a mock function with given fields:
func (_m *MockEC2ClientIface) DescribeWorkingInstances() (Instances, error) {
	ret := _m.Called()

	var r0 Instances
	if rf, ok := ret.Get(0).(func() Instances); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Instances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchSpotInstances provides a mock function with given fields: v, c, ami
func (_m *MockEC2ClientIface) LaunchSpotInstances(v InstanceVariety, c int64, ami string) error {
	ret := _m.Called(v, c, ami)

	var r0 error
	if rf, ok := ret.Get(0).(func(InstanceVariety, int64, string) error); ok {
		r0 = rf(v, c, ami)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PropagateTagsFromSIRsToInstances provides a mock function with given fields: reqs
func (_m *MockEC2ClientIface) PropagateTagsFromSIRsToInstances(reqs []*ec2.SpotInstanceRequest) error {
	ret := _m.Called(reqs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*ec2.SpotInstanceRequest) error); ok {
		r0 = rf(reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerminateInstances provides a mock function with given fields: instances
func (_m *MockEC2ClientIface) TerminateInstances(instances Instances) error {
	ret := _m.Called(instances)

	var r0 error
	if rf, ok := ret.Get(0).(func(Instances) error); ok {
		r0 = rf(instances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerminateInstancesByCount provides a mock function with given fields: instances, v, count
func (_m *MockEC2ClientIface) TerminateInstancesByCount(instances Instances, v InstanceVariety, count int64) error {
	ret := _m.Called(instances, v, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(Instances, InstanceVariety, int64) error); ok {
		r0 = rf(instances, v, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ EC2ClientIface = (*MockEC2ClientIface)(nil)
